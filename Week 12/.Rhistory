factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
install.packages("ggplot2")
library(ggplot2)
Numbers <- table(mtcars$cyl, mtcars$gear)
barplot(Numbers,
main='Automobile cylinder number grouped by number of gears',
col = c('red','orange', 'steelblue'),
legend = rownames(Numbers),
xlab = 'Number of Gears',
ylab = 'count')
hist(airquality$Temp,
col = 'steelblue',
main = 'Maximum Daily Temperature',
xlab = 'Temperature (degrees Fahrenheit)')
with(subset(airquality, Month==9),
plot(Wind,Ozone, col = 'steelblue', pch = 20, cex = 1.5))
title('Wind and Temperature in NYC in September of 1973')
mtcars <- transform(mtcars,
cyl=factor(cyl)) # convert 'cyl' column from class 'numeric' to class 'factor'
class(mtcars$cyl) # 'cyl' is now a categorical variable
boxplot(mpg~cyl, mtcars,
xlab='Number of Cylinders',
ylab='miles per gallon',
main='miles per gallon for varied cylinders in automobiles',
cex.main=1.2)
# Create data
data <- data.frame(
name=c("A", "B", "C", "D", "E") ,
value=c(3, 12, 5, 18, 45)
)
# Barplot
ggplot(data, aes(x = name, y = value)) +
geom_bar(stat = "identity")
install.packages("tidyverse")
install.packages(c("lattice", "mgcv", "nlme", "survival"))
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
setwd("~/OneDrive - UGM 365/UGM/Akademik/Semester 5/BIT33603 Data Mining/Lab/Week 12")
setwd("~/OneDrive - UGM 365/UGM/Akademik/Semester 5/BIT33603 Data Mining/Lab/Week 12")
Dataset = read.csv('dataset2.csv')
library(class)
training_set <- Dataset[1:20,] # 60% training
testing_set <- Dataset[21:28,] # 40% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
testing_result <- knn(train = training_set,
test = testing_set,
cl = training_labels,
k = 3)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = testing_labels)
output
library(caret)
output <- confusionMatrix(data = testing_result,
reference = testing_labels)
output
Dataset = read.csv('dataset2.csv')
library(class)
training_set <- Dataset[1:20,] # 60% training
testing_set <- Dataset[21:28,] # 40% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
testing_result <- knn(train = training_set,
test = testing_set,
cl = training_labels,
k = 3)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = testing_labels)
output
Dataset = read.csv('dataset2.csv')
library(class)
training_set <- Dataset[1:20,] # 60% training
testing_set <- Dataset[21:28,] # 40% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
testing_result <- knn(train = training_set,
test = testing_set,
cl = training_labels,
k = 3)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels)
output
Dataset = read.csv('dataset2.csv')
library(class)
training_set <- Dataset[1:20,] # 60% training
testing_set <- Dataset[21:28,] # 40% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
testing_result <- knn(train = training_set,
test = testing_set,
cl = training_labels,
k = 3)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels))
output
Dataset = read.csv('dataset2.csv')
Dataset$Purchased = factor(Dataset$Purchased,
levels = c(0, 1))
summary(Dataset)
library(class)
training_set <- Dataset[1:20,]
testing_set <- Dataset[21:28,]
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
testing_result <- knn(train = training_set,
test = testing_set,
cl = training_labels,
k = 3)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels))
output
Dataset = read.csv('dataset2.csv')
Dataset$Purchased = factor(Dataset$Purchased,
levels = c(0, 1))
summary(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Feature Scaling 1 age, 2 is salary
training_set[-4] <- scale(training_set[-4])
testing_set[-4] <- scale(testing_set[-4])
training_set[-4]
testing_set[-4]
install.packages('rpart')
install.packages("rpart")
library(rpart)
classifier = rpart(formula = training_labels ~ .,
data = training_set)
plot(classifier)
text(classifier)
Dataset = read.csv('dataset2.csv')
Dataset$Purchased = factor(Dataset$Purchased,
levels = c(0, 1))
summary(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Feature Scaling 1 age, 2 is salary
training_set[-4] <- scale(training_set[-4])
testing_set[-4] <- scale(testing_set[-4])
training_set[-4]
testing_set[-4]
install.packages('rpart')
library(rpart)
classifier = rpart(formula = training_labels ~ .,
data = training_set)
plot(classifier)
text(classifier)
testing_result = predict(classifier,
newdata = testing_set[-5],
type = 'class')
install.packages("rpart")
Dataset = read.csv('dataset2.csv')
Dataset$Purchased = factor(Dataset$Purchased,
levels = c(0, 1))
summary(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Feature Scaling 1 age, 2 is salary
training_set[-4] <- scale(training_set[-4])
testing_set[-4] <- scale(testing_set[-4])
training_set[-4]
testing_set[-4]
library(rpart)
classifier = rpart(formula = training_labels ~ .,
data = training_set)
plot(classifier)
text(classifier)
testing_result = predict(classifier,
newdata = testing_set[-5],
type = 'class')
install.packages('rpart.plot')
rpart.plot(classifier)
library(rpart.plot)
Dataset = read.csv('dataset2.csv')
Dataset$Purchased = factor(Dataset$Purchased,
levels = c(0, 1))
summary(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Feature Scaling 1 age, 2 is salary
training_set[-4] <- scale(training_set[-4])
testing_set[-4] <- scale(testing_set[-4])
training_set[-4]
testing_set[-4]
library(rpart)
library(rpart.plot)
classifier = rpart(formula = training_labels ~ .,
data = training_set)
plot(classifier)
text(classifier)
rpart.plot(classifier)
testing_result = predict(classifier,
newdata = testing_set[-5],
type = 'class')
testing_result = predict(classifier,
newdata = testing_set[-5],
type = 'class')
testing_result
testing_labels
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = testing_labels)
output
# Neural Network
install.packages('neuralnet')
# Neural Network
library(neuralnet)
Dataset = read.csv('dataset2.csv')
summary(Dataset)
View(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Neural Network
nn <- neuralnet(Purchased ~ Country + Age + Salary,
data = training_set,
hidden = c(2, 1),
linear.output = FALSE,
threshold = 0.01)
nn$result.matrix
plot(nn)
# Neural Network
library(neuralnet)
Dataset = read.csv('dataset2.csv')
summary(Dataset)
View(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Neural Network
nn <- neuralnet(Purchased ~ Country + Age + Salary,
data = training_set,
hidden = c(2, 1),
linear.output = FALSE,
threshold = 0.01)
nn$result.matrix
plot(nn)
View(Dataset)
View(Dataset)
View(nn)
View(nn)
nn$result.matrix
plot(nn)
# Test the resulting output
temp_test <- subset(testing_set,
select = c('Country', 'Age', 'Salary'))
head(temp_test)
output <- compute(nn, temp_test)
output
testing_result <- sapply(output$net,
round,
digits = 0)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = testing_labels)
output
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels))
output
# Neural Network
library(neuralnet)
Dataset = read.csv('dataset2.csv')
summary(Dataset)
View(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Neural Network
nn <- neuralnet(Purchased ~ Country + Age + Salary,
data = training_set,
hidden = c(2, 1),
linear.output = FALSE,
threshold = 0.01)
nn$result.matrix
plot(nn)
# Test the resulting output
temp_test <- subset(testing_set,
select = c('Country', 'Age', 'Salary'))
head(temp_test)
output <- compute(nn, temp_test)
output
testing_result <- sapply(output$net,
round,
digits = 0)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels))
output
View(training_set)
# Neural Network
library(neuralnet)
Dataset = read.csv('dataset2.csv')
summary(Dataset)
View(Dataset)
library(class)
training_set <- Dataset[1:20,] # 70% training
testing_set <- Dataset[21:28,] # 30% testing
training_labels <- Dataset[1:20, 4]
testing_labels <- Dataset[21:28, 4]
View(training_set)
View(testing_set)
training_labels
testing_labels
# Neural Network
nn <- neuralnet(Purchased ~ Country + Age + Salary,
data = training_set,
hidden = c(2, 1),
linear.output = FALSE,
threshold = 0.01)
nn$result.matrix
plot(nn)
# Test the resulting output
temp_test <- subset(testing_set,
select = c('Country', 'Age', 'Salary'))
head(temp_test)
output <- compute(nn, temp_test)
output
testing_result <- sapply(output$net,
round,
digits = 0)
testing_result
library(gmodels)
CrossTable(x = testing_labels,
y = testing_result,
prop.chisq = FALSE)
library(caret)
output <- confusionMatrix(data = testing_result,
reference = as.factor(testing_labels))
output
